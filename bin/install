#!/bin/sh

################################################################################
#
# Server name
#

server_name=$(shift)
for name in $server_name $@; do
    echo "$name" | grep -E '^[a-z0-9.-]+$' >/dev/null
    if [ $? -gt 0 ]; then
        echo "Invalid server name: $name"
        exit 2
    fi
done
other_names="$@"


################################################################################
#
# Installation defaults
#

: ${project_dir:=$(cd "$(dirname -- "$0")/.."; pwd)}
: ${WEB_CONCURRENCY:=3}

if   command -v brew            > /dev/null; then osname=darwin
elif command -v freebsd-version > /dev/null; then osname=freebsd
elif command -v apt-get         > /dev/null; then osname=linux
else
    echo 'Unable to determine the operating system'
    exit 1
fi
. $(dirname -- "$0")/prepare.${osname}


################################################################################
#
# Functions
#

_create_cert() {
    _nginx stop
    certbot certonly --standalone -d "${server_name}" "${other_names}"
    _nginx start
}

_setup_project() {
    PYTHONUSERBASE=${project_dir}/.local \
        pip3 install --user -r requirements.txt
    PYTHONUSERBASE=${project_dir}/.local PYTHONPATH=${project_dir}/src \
        ${project_dir}/src/manage.py migrate
}

_setup_uwsgi() {
    cat > "${uwsgi_conf}" <<EOT
[uwsgi]
set-placeholder = project_dir=${project_dir}

plugins = python3,syslog
wsgi-file = %(project_dir)/src/project/wsgi.py
socket = /tmp/uwsgi.vassal.%n
req-logger = syslog:%n,local6
logger = syslog:%n,local7
processes = ${WEB_CONCURRENCY}
log-format = %(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"

env = PYTHONPATH=%(project_dir)/src
env = PYTHONUSERBASE=%(project_dir)/.local
env = SECRET_KEY=$(openssl rand -base64 48)
EOT
}

_setup_nginx() {
    cat > "${nginx_conf}" <<EOT
upstream django.${server_name} {
    server unix:///tmp/uwsgi.vassal.${server_name};
}

server {
    listen 80;
    server_name ${server_name} ${other_names};
    server_tokens off;
    return 301 https://${server_name}$request_uri;
}

server {
    listen 443 ssl;
    server_name ${server_name} ${other_names};
    server_tokens off;
    add_header Strict-Transport-Security "max-age=31536000";

    ssl_certificate           /etc/letsencrypt/live/${server_name}/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/${server_name}/privkey.pem;
    ssl_session_timeout       5m;
    ssl_protocols             TLSv1.2;
    ssl_ciphers               HIGH:!ADH:!MD5;
    ssl_prefer_server_ciphers on;
    keepalive_timeout         70;

    client_max_body_size 20m;

    root ${project_dir}/htdocs;
    location /static/ {}
    location /media/ {}
    location / {
        uwsgi_pass       django.${server_name};
        include          uwsgi_params;
    }
}
EOT
}

_create_env_file() {
    cat > "${project_dir}/env.sh" <<EOT
#!/bin/sh

export $(grep '^env =' "${nginx_conf}" | sed -e 's/env = //' | xargs)
EOT
}


################################################################################
#
# Installation
#

_prerequisites
_startup
_create_cert
_setup_project
_setup_uwsgi
_setup_nginx
_nginx restart
_create_env_file
